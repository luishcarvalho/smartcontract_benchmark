
pragma solidity ^0.8.0;
import "./StakingModel.sol";
import "../interfaces/IEnergy.sol";
import "../interfaces/IVthoClaimable.sol";

contract VVET9 is StakingModel, IVthoClaimable {
    string public name = "Veiled VET";
    string public symbol = "VVET";
    uint8 public decimals = 18;

    event Approval(address indexed src, address indexed guy, uint256 wad);
    event Transfer(address indexed src, address indexed dst, uint256 wad);
    event Deposit(address indexed dst, uint256 wad);
    event Withdrawal(address indexed src, uint256 wad);

    mapping(address => mapping(address => uint256)) public allowance;

    receive() external payable {
        deposit();
    }

    function deposit() public payable {
        addVET(msg.sender, msg.value);
        emit Deposit(msg.sender, msg.value);
    }


    function withdraw(uint256 wad) public {
        require(vetBalance(msg.sender) >= wad);
        removeVET(msg.sender, wad);
        payable(msg.sender).transfer(wad);
        emit Withdrawal(msg.sender, wad);
    }


    function balanceOf(address guy) public view returns (uint256) {
        return vetBalance(guy);
    }

    function totalSupply() public view returns (uint256) {
        return address(this).balance;
    }


    function approve(address guy, uint256 wad) public returns (bool) {
        allowance[msg.sender][guy] = wad;
        emit Approval(msg.sender, guy, wad);
        return true;
    }

    function transfer(address dst, uint256 wad) public returns (bool) {
        return transferFrom(msg.sender, dst, wad);
    }

    function transferFrom(
        address src,
        address dst,
        uint256 wad
    ) public returns (bool) {
        require(vetBalance(src) >= wad);

        if (
            src != msg.sender && allowance[src][msg.sender] != type(uint256).max
        ) {
            require(allowance[src][msg.sender] >= wad);
            allowance[src][msg.sender] -= wad;
        }

        removeVET(src, wad);
        addVET(dst, wad);

        emit Transfer(src, dst, wad);

        return true;
    }

    address constant energyContractAddress = 0x0000000000000000000000000000456E65726779;


    function claimVTHO(address to, uint256 amount) public override returns (bool) {
        removeVTHO(msg.sender, amount);
        IEnergy(energyContractAddress).transfer(to, amount);
        return true;
    }
}






































































































































































































































































































































































































































































































































































































































































































